{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "deposit"
      ],
      "properties": {
        "deposit": {
          "type": "object",
          "required": [
            "job_id"
          ],
          "properties": {
            "job_id": {
              "$ref": "#/definitions/JobId"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "withdraw"
      ],
      "properties": {
        "withdraw": {
          "type": "object",
          "required": [
            "withdraw_info"
          ],
          "properties": {
            "withdraw_info": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JobInfo"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "with_consensus"
      ],
      "properties": {
        "with_consensus": {
          "type": "object",
          "required": [
            "raw_json",
            "signatures"
          ],
          "properties": {
            "raw_json": {
              "type": "string"
            },
            "signatures": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Signature"
              }
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "JobId": {
      "type": "string"
    },
    "JobInfo": {
      "type": "object",
      "required": [
        "coin",
        "job_id"
      ],
      "properties": {
        "coin": {
          "$ref": "#/definitions/Coin"
        },
        "job_id": {
          "$ref": "#/definitions/JobId"
        }
      }
    },
    "PubKey": {
      "$ref": "#/definitions/Binary"
    },
    "Signature": {
      "type": "object",
      "required": [
        "pubkey",
        "signature"
      ],
      "properties": {
        "pubkey": {
          "$ref": "#/definitions/PubKey"
        },
        "signature": {
          "$ref": "#/definitions/Binary"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
